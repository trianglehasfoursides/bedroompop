// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: message.proto

package server

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PopService_Create_FullMethodName = "/message.PopService/Create"
	PopService_Get_FullMethodName    = "/message.PopService/Get"
	PopService_Drop_FullMethodName   = "/message.PopService/Drop"
	PopService_Query_FullMethodName  = "/message.PopService/Query"
	PopService_Exec_FullMethodName   = "/message.PopService/Exec"
)

// PopServiceClient is the client API for PopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PopServiceClient interface {
	Create(ctx context.Context, in *RequestCreate, opts ...grpc.CallOption) (*DDLResponse, error)
	Get(ctx context.Context, in *RequestGetDrop, opts ...grpc.CallOption) (*DDLResponse, error)
	Drop(ctx context.Context, in *RequestGetDrop, opts ...grpc.CallOption) (*DDLResponse, error)
	Query(ctx context.Context, in *RequestQueryExec, opts ...grpc.CallOption) (*ResponseQuery, error)
	Exec(ctx context.Context, in *RequestQueryExec, opts ...grpc.CallOption) (*ResponseExec, error)
}

type popServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPopServiceClient(cc grpc.ClientConnInterface) PopServiceClient {
	return &popServiceClient{cc}
}

func (c *popServiceClient) Create(ctx context.Context, in *RequestCreate, opts ...grpc.CallOption) (*DDLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DDLResponse)
	err := c.cc.Invoke(ctx, PopService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *popServiceClient) Get(ctx context.Context, in *RequestGetDrop, opts ...grpc.CallOption) (*DDLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DDLResponse)
	err := c.cc.Invoke(ctx, PopService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *popServiceClient) Drop(ctx context.Context, in *RequestGetDrop, opts ...grpc.CallOption) (*DDLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DDLResponse)
	err := c.cc.Invoke(ctx, PopService_Drop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *popServiceClient) Query(ctx context.Context, in *RequestQueryExec, opts ...grpc.CallOption) (*ResponseQuery, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseQuery)
	err := c.cc.Invoke(ctx, PopService_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *popServiceClient) Exec(ctx context.Context, in *RequestQueryExec, opts ...grpc.CallOption) (*ResponseExec, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseExec)
	err := c.cc.Invoke(ctx, PopService_Exec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PopServiceServer is the server API for PopService service.
// All implementations must embed UnimplementedPopServiceServer
// for forward compatibility.
type PopServiceServer interface {
	Create(context.Context, *RequestCreate) (*DDLResponse, error)
	Get(context.Context, *RequestGetDrop) (*DDLResponse, error)
	Drop(context.Context, *RequestGetDrop) (*DDLResponse, error)
	Query(context.Context, *RequestQueryExec) (*ResponseQuery, error)
	Exec(context.Context, *RequestQueryExec) (*ResponseExec, error)
	mustEmbedUnimplementedPopServiceServer()
}

// UnimplementedPopServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPopServiceServer struct{}

func (UnimplementedPopServiceServer) Create(context.Context, *RequestCreate) (*DDLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPopServiceServer) Get(context.Context, *RequestGetDrop) (*DDLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPopServiceServer) Drop(context.Context, *RequestGetDrop) (*DDLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Drop not implemented")
}
func (UnimplementedPopServiceServer) Query(context.Context, *RequestQueryExec) (*ResponseQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedPopServiceServer) Exec(context.Context, *RequestQueryExec) (*ResponseExec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedPopServiceServer) mustEmbedUnimplementedPopServiceServer() {}
func (UnimplementedPopServiceServer) testEmbeddedByValue()                    {}

// UnsafePopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PopServiceServer will
// result in compilation errors.
type UnsafePopServiceServer interface {
	mustEmbedUnimplementedPopServiceServer()
}

func RegisterPopServiceServer(s grpc.ServiceRegistrar, srv PopServiceServer) {
	// If the following call pancis, it indicates UnimplementedPopServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PopService_ServiceDesc, srv)
}

func _PopService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PopServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PopService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PopServiceServer).Create(ctx, req.(*RequestCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PopService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetDrop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PopServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PopService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PopServiceServer).Get(ctx, req.(*RequestGetDrop))
	}
	return interceptor(ctx, in, info, handler)
}

func _PopService_Drop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetDrop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PopServiceServer).Drop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PopService_Drop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PopServiceServer).Drop(ctx, req.(*RequestGetDrop))
	}
	return interceptor(ctx, in, info, handler)
}

func _PopService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryExec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PopServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PopService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PopServiceServer).Query(ctx, req.(*RequestQueryExec))
	}
	return interceptor(ctx, in, info, handler)
}

func _PopService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryExec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PopServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PopService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PopServiceServer).Exec(ctx, req.(*RequestQueryExec))
	}
	return interceptor(ctx, in, info, handler)
}

// PopService_ServiceDesc is the grpc.ServiceDesc for PopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.PopService",
	HandlerType: (*PopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PopService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PopService_Get_Handler,
		},
		{
			MethodName: "Drop",
			Handler:    _PopService_Drop_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _PopService_Query_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _PopService_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
